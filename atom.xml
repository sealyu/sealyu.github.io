<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haibo Yu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://haiboyu.me/"/>
  <updated>2017-10-19T02:08:11.000Z</updated>
  <id>http://haiboyu.me/</id>
  
  <author>
    <name>Haibo Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Georgia Tech OMSCS</title>
    <link href="http://haiboyu.me/zh-Hans/2017/10/10/Georgia-Tech-OMSCS/"/>
    <id>http://haiboyu.me/zh-Hans/2017/10/10/Georgia-Tech-OMSCS/</id>
    <published>2017-10-11T01:43:58.000Z</published>
    <updated>2017-10-19T02:08:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天终于收到了Georgia Tech的录取通知书，不枉近半年的努力。</p><img src="/zh-Hans/2017/10/10/Georgia-Tech-OMSCS/gt_coc.png" alt="Georgia Tech Online Master of Science in Computer Science" title="Georgia Tech Online Master of Science in Computer Science"><p>年初听到同事推荐Georgia Tech的<a href="http://www.omscs.gatech.edu/" target="_blank" rel="external">OMSCS</a>项目, 作为一个Computer Science在US News Ranking排名第9的专业，刚开始申请的时候确实没什么信心。不过由于online的优点和超高的性价比（学费约7000美元），还是决定申请:</p><ul><li>5月份开始准备托福考试，开始了没日没夜背单词刷题的生活</li><li>6月24号参加了托福考试，因为听力没把握好时间，最后一篇4道题目没有做，总分只拿到96分，离102的分数线还是低了6分。比较沮丧，放弃申请</li><li>8月份国内归来，报着试试看的想法，重新开始申请</li><li>一周内写完简历、Background、CareerObjective、StateOfPurpose，找同事写了3封Recommendation letter，8月18号提交申请</li><li>10月10号收到GT的decision letter</li><li>今天收到GT的final admission letter.</li></ul><p>现在准备开始未来两到三年没日没夜一边工作一边读书的生活了。。。</p><img src="/zh-Hans/2017/10/10/Georgia-Tech-OMSCS/jiayou.jpeg" alt="jiayou.jpeg" title="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天终于收到了Georgia Tech的录取通知书，不枉近半年的努力。&lt;/p&gt;
&lt;img src=&quot;/zh-Hans/2017/10/10/Georgia-Tech-OMSCS/gt_coc.png&quot; alt=&quot;Georgia Tech Online Master of S
      
    
    </summary>
    
      <category term="Life" scheme="http://haiboyu.me/categories/Life/"/>
    
    
      <category term="Life" scheme="http://haiboyu.me/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>二叉树相关算法</title>
    <link href="http://haiboyu.me/zh-Hans/2017/10/02/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/"/>
    <id>http://haiboyu.me/zh-Hans/2017/10/02/二叉树相关算法/</id>
    <published>2017-10-02T20:03:23.000Z</published>
    <updated>2017-10-09T20:45:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h2><p>根据维基百科的定义：在计算机科学中，二叉树（英语：Binary tree）是每个节点最多只有两个分支(不存在分支度大于2的节点)的树结构。通常分支被称作“左子树”和“右子树”。二叉树的分支具有左右次序，不能颠倒。</p><p>二叉树通常作为数据结构应用，典型用法是对节点定义一个标记函数，将一些值与每个节点相关系。这样标记的二叉树就可以实现二叉查找树和二元堆积，并应用于高效率的搜索和排序。</p><p>本文中所有二叉树代码都使用一下结构代表树节点：</p><pre><code>/** * This class describes a node of the binary tree * @author Haibo Yu on 10/08/2017. */public class BinaryTreeNode {    private int value;    private BinaryTreeNode leftChild;    private BinaryTreeNode rightChild;    ....}</code></pre><h2 id="二-实际应用"><a href="#二-实际应用" class="headerlink" title="二. 实际应用"></a>二. 实际应用</h2><ol><li>B+和B-树在文件系统中的应用</li><li>红黑树用于调度、虚拟内存管理、跟踪文件描述符和目录条目等</li><li>Radix树，用于内存管理、NFS相关查找和网络相关的功能</li><li>二叉树搜索用于中断处理、登记缓存查找等</li><li>Merkle 树用于最近比较流行的区块链技术。</li></ol><h2 id="三-相关算法"><a href="#三-相关算法" class="headerlink" title="三. 相关算法"></a>三. 相关算法</h2><h3 id="1-求二叉树中的节点个数"><a href="#1-求二叉树中的节点个数" class="headerlink" title="1. 求二叉树中的节点个数"></a>1. 求二叉树中的节点个数</h3><p><strong>分析：</strong> </p><p>可以通过递归的方法：</p><ol><li>如果二叉树为空，节点个数为0</li><li>如果二叉树不为空，二叉树节点个数 = 左子树节点个数 + 右子树节点个数 + 1</li></ol><p><strong>代码如下：</strong> </p><pre><code>/** * Given a root node of a binary tree, get the node count * @param rootNode The root node of the binary tree * @return The count of the nodes in the binary tree */public int getNodeCountOfBinaryTree(BinaryTreeNode rootNode){    if(null == rootNode){        return 0;    }else{        return getNodeCountOfBinaryTree(rootNode.getLeftChild()) + getNodeCountOfBinaryTree(rootNode.getRightChild()) + 1;    }}</code></pre><h3 id="2-求二叉树的深度"><a href="#2-求二叉树的深度" class="headerlink" title="2. 求二叉树的深度"></a>2. 求二叉树的深度</h3><p><strong>分析：</strong> </p><p>递归解法：</p><ol><li>如果二叉树为空，二叉树的深度为0</li><li>如果二叉树不为空，二叉树的深度 = max(左子树深度， 右子树深度) + 1</li></ol><p><strong>代码如下：</strong> </p><pre><code>/** * Given a root node of a binary tree, get the tree depth * @param rootNode The root node of the binary tree * @return The depth of the binary tree */public int getDepthOfBinaryTree(BinaryTreeNode rootNode){    if(null == rootNode){        return 0;    }else{        int leftSubTreeDepth = getDepthOfBinaryTree(rootNode.getLeftChild());        int rightSubTreeDepth = getDepthOfBinaryTree(rootNode.getRightChild());        return  (leftSubTreeDepth &gt; rightSubTreeDepth )?(leftSubTreeDepth + 1):(rightSubTreeDepth + 1);    }}</code></pre><h3 id="3-前序遍历，中序遍历，后序遍历"><a href="#3-前序遍历，中序遍历，后序遍历" class="headerlink" title="3. 前序遍历，中序遍历，后序遍历"></a>3. 前序遍历，中序遍历，后序遍历</h3><p><strong>分析：</strong> </p><p>前序遍历递归解法：</p><p>（1）如果二叉树为空，空操作</p><p>（2）如果二叉树不为空，访问根节点，前序遍历左子树，前序遍历右子树</p><p>中序遍历递归解法</p><p>（1）如果二叉树为空，空操作。</p><p>（2）如果二叉树不为空，中序遍历左子树，访问根节点，中序遍历右子树</p><p>后序遍历递归解法</p><p>（1）如果二叉树为空，空操作</p><p>（2）如果二叉树不为空，后序遍历左子树，后序遍历右子树，访问根节点</p><p><strong>代码如下：</strong> </p><p>这些操作比较简单，类似于求深度和统计节点数，所以这里就不加了。</p><h3 id="4-分层遍历二叉树（按层次从上往下，从左往右）"><a href="#4-分层遍历二叉树（按层次从上往下，从左往右）" class="headerlink" title="4. 分层遍历二叉树（按层次从上往下，从左往右）"></a>4. 分层遍历二叉树（按层次从上往下，从左往右）</h3><p><strong>分析：</strong> </p><p>相当于广度优先搜索，使用队列实现。队列初始化，将根节点压入队列。当队列不为空，进行如下操作：弹出一个节点，访问，若左子节点或右子节点不为空，将其压入队列。</p><p><strong>代码如下：</strong> </p><pre><code>/** * Given a root node of a binary tree, iterate the tree by every level * @param rootNode The root node of the binary tree */public void iterateBinaryTreeByLevel(BinaryTreeNode rootNode){    if(null == rootNode){        return ;    }    Queue&lt;BinaryTreeNode&gt; nodes = new LinkedList&lt;&gt;();    nodes.offer(rootNode);    while(!nodes.isEmpty()){        BinaryTreeNode curNode = nodes.poll();        System.out.println(&quot;Pop Node:&quot;+curNode.getValue());        if(null != curNode.getLeftChild()){            nodes.offer(curNode.getLeftChild());        }        if(null != curNode.getRightChild()){            nodes.offer(curNode.getRightChild());        }    }}</code></pre><h3 id="5-将二叉查找树变为有序的双向链表"><a href="#5-将二叉查找树变为有序的双向链表" class="headerlink" title="5. 将二叉查找树变为有序的双向链表"></a>5. 将二叉查找树变为有序的双向链表</h3><p>二叉查找树（英语：Binary Search Tree），也称二叉搜索树、有序二叉树（英语：ordered binary tree），排序二叉树（英语：sorted binary tree），是指一棵空树或者具有下列性质的二叉树：</p><ul><li>若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；</li><li>若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；</li><li>任意节点的左、右子树也分别为二叉查找树；</li><li>没有键值相等的节点。</li></ul><p>二叉查找树相比于其他数据结构的优势在于查找、插入的时间复杂度较低。为O(log n)。二叉查找树是基础性数据结构，用于构建更为抽象的数据结构，如集合、multiset、关联数组等。</p><p><strong>题目描述：</strong> </p><p>输入一棵二叉搜索树，现在要将该二叉搜索树转换成一个排序的双向链表。而且在转换的过程中，不能创建任何新的结点，只能调整树中的结点指针的指向来实现。</p><p><strong>分析：</strong> </p><p>使用递归算法处理。左子树转换后的最后一个节点为根节点在双向链表中的前一个节点，根节点的后一个节点为右子树转换后的第一个节点。</p><p><strong>解题思路：</strong></p><ul><li>如果左子树不为null，处理左子树</li></ul><p>a）递归转化左子树为双向链表；</p><p>b）找出根结点的前驱节点（是左子树的最右的节点）</p><p>c）将上一步找出的节点和根结点连接起来</p><ul><li>如果右子树不为null，处理右子树（和上面的很类似）</li></ul><p>a）递归转化右子树为双向链表；</p><p>b）找出根结点的后继节点（是右子树的最左的节点）</p><p>c）将上一步找出的节点和根结点连接起来</p><p>找到最左边的节点并返回</p><p><strong>代码如下：</strong> </p><pre><code>/** * Convert a binary search tree into a doubly linked list, the requirement is not to create * new node, only change the pointers based on the existing node. * @param rootNode The root node of the binary search tree. * @return The head node of the doubly linked list. */public void convertBinaryTreeToDoublyLinkedList(BinaryTreeNode rootNode){    if(null == rootNode){        return;    }    if(null != rootNode.getLeftChild()){        convertBinaryTreeToDoublyLinkedList(rootNode.getLeftChild());        BinaryTreeNode biggestNode = findBiggestNodeInTheTree(rootNode.getLeftChild());        biggestNode.setRightChild(rootNode);        rootNode.setLeftChild(biggestNode);    }    if(null != rootNode.getRightChild()){        convertBinaryTreeToDoublyLinkedList(rootNode.getRightChild());        BinaryTreeNode smallestNode = findSmalledNodeInTheTree(rootNode.getRightChild());        smallestNode.setLeftChild(rootNode);;        rootNode.setRightChild(smallestNode);    }}/** * Find the smallest node in the binary search tree * @param rootNode The root node * @return The smallest node in the binary search tree */private BinaryTreeNode findSmalledNodeInTheTree(BinaryTreeNode rootNode){    while(rootNode.getLeftChild() != null){        rootNode = rootNode.getLeftChild();    }    return rootNode;}/** * Find the biggest node in the binary search tree * @param rootNode The root node * @return The biggest node in the binary search tree */private BinaryTreeNode findBiggestNodeInTheTree(BinaryTreeNode rootNode){    while(rootNode.getRightChild() != null){        rootNode = rootNode.getRightChild();    }    return rootNode;}</code></pre><h3 id="6-求二叉树第K层的节点个数"><a href="#6-求二叉树第K层的节点个数" class="headerlink" title="6. 求二叉树第K层的节点个数"></a>6. 求二叉树第K层的节点个数</h3><p><strong>分析：</strong> </p><p>递归解法：</p><p>（1）如果二叉树为空或者k&lt;1返回0</p><p>（2）如果二叉树不为空并且k==1，返回1</p><p>（3）如果二叉树不为空且k&gt;1，返回左子树中k-1层的节点个数与右子树k-1层节点个数之和</p><p><strong>代码如下：</strong> </p><pre><code>/** * Get the total node number of the kth level of the binary tree * @param rootNode The root node of the binary tree * @param k The level number * @return The total node number of the kth level. */public int getNodeNumberForKthLevel(BinaryTreeNode rootNode, int k){    if(null == rootNode || k&lt;1){        return 0;    }    if(k ==1){        return 1;    }    int totalLeft = getNodeNumberForKthLevel(rootNode.getLeftChild(),k-1);    int totalRight = getNodeNumberForKthLevel(rootNode.getRightChild(),k-1);    return totalLeft + totalRight;}</code></pre><h3 id="7-求二叉树中叶子节点的个数"><a href="#7-求二叉树中叶子节点的个数" class="headerlink" title="7. 求二叉树中叶子节点的个数"></a>7. 求二叉树中叶子节点的个数</h3><p><strong>分析：</strong> </p><p>递归解法：</p><p>（1）如果二叉树为空，返回0</p><p>（2）如果二叉树不为空且左右子树为空，返回1</p><p>（3）如果二叉树不为空，且左右子树不同时为空，返回左子树中叶子节点个数加上右子树中叶子节点个数</p><p><strong>代码如下：</strong> </p><pre><code>/** * Get the total leaf node number of the binary tree * @param rootNode The root node of the binary tree * @return The total leaf node number */public int getLeafNodeNumberForBinaryTree(BinaryTreeNode rootNode){    if(null == rootNode){        return 0;    }    if(null == rootNode.getLeftChild() &amp;&amp; null == rootNode.getRightChild()){        return 1;    }    int totalLeft = getLeafNodeNumberForBinaryTree(rootNode.getLeftChild());    int totalRight = getLeafNodeNumberForBinaryTree(rootNode.getRightChild());    return totalLeft + totalRight;}</code></pre><h3 id="8-判断两棵二叉树是否结构相同"><a href="#8-判断两棵二叉树是否结构相同" class="headerlink" title="8. 判断两棵二叉树是否结构相同"></a>8. 判断两棵二叉树是否结构相同</h3><p><strong>分析：</strong> </p><p>递归解法：</p><p>（1）如果两棵二叉树都为空，返回真</p><p>（2）如果两棵二叉树一棵为空，另一棵不为空，返回假</p><p>（3）如果两棵二叉树都不为空，如果对应的左子树和右子树都同构返回真，其他返回假</p><p><strong>代码如下：</strong> </p><pre><code>/** * Given 2 binary tree, check if they are same structure. * @param rootNode1 The root node of the 1st binary tree * @param rootNode2 The root node of the 2nd binary tree * @return If they have same strcture */public boolean checkIfTwoBinaryTreeHaveSameStructure(BinaryTreeNode rootNode1,BinaryTreeNode rootNode2){    if(null == rootNode1 &amp;&amp; null == rootNode2){        return true;    }else if(null == rootNode1 || null == rootNode2){        return false;    }    boolean leftEqual = checkIfTwoBinaryTreeHaveSameStructure(rootNode1.getLeftChild(), rootNode2.getLeftChild());    boolean rightEqual = checkIfTwoBinaryTreeHaveSameStructure(rootNode1.getRightChild(),rootNode2.getRightChild());    return (leftEqual &amp;&amp; rightEqual);}</code></pre><h3 id="9-判断二叉树是不是平衡二叉树"><a href="#9-判断二叉树是不是平衡二叉树" class="headerlink" title="9. 判断二叉树是不是平衡二叉树"></a>9. 判断二叉树是不是平衡二叉树</h3><p>平衡二叉树（Self-balancing binary search tree）又被称为AVL树（有别于AVL算法），且具有以下性质：</p><ul><li>它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树，</li><li>同时，平衡二叉树必定是二叉搜索树，反之则不一定。</li></ul><p>平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等。 最小二叉平衡树的节点的公式如下 F(n)=F(n-1)+F(n-2)+1 这个类似于一个递归的数列，可以参考Fibonacci(斐波那契)数列，1是根节点，F(n-1)是左子树的节点数量，F(n-2)是右子树的节点数量。</p><p><strong>分析：</strong> </p><p>递归解法：</p><p>（1）如果二叉树为空，返回真</p><p>（2）如果二叉树不为空，如果左子树和右子树都是AVL树并且左子树和右子树高度相差不大于1，返回真，其他返回假</p><p><strong>代码如下：</strong> </p><pre><code>/** * Given a binary tree, check if it is AVL tree. * @param rootNode The root node of the binary tree * @return If the tree is AVL tree */public boolean checkIfAVLBinaryTree(BinaryTreeNode rootNode){    if(null == rootNode){        return true;    }    boolean leftAVL = checkIfAVLBinaryTree(rootNode.getLeftChild());    boolean rightAVL = checkIfAVLBinaryTree(rootNode.getRightChild());    int leftDepth = this.getDepthOfBinaryTree(rootNode.getLeftChild());    int rightDepth = this.getDepthOfBinaryTree(rootNode.getRightChild());    return (leftAVL &amp;&amp; rightAVL &amp;&amp; (Math.abs(leftDepth - rightDepth)&lt;=1));}</code></pre><h3 id="10-求二叉树的镜像"><a href="#10-求二叉树的镜像" class="headerlink" title="10. 求二叉树的镜像"></a>10. 求二叉树的镜像</h3><p><strong>分析：</strong> </p><p>递归解法：</p><p>（1）如果二叉树为空，返回空</p><p>（2）如果二叉树不为空，求左子树和右子树的镜像，然后交换左子树和右子树</p><p><strong>代码如下：</strong> </p><pre><code>/** * Given a binary tree, get it&apos;s mirror tree. * @param rootNode The root node of the binary tree * @return The mirror tree */public BinaryTreeNode getMirrorBinaryTree(BinaryTreeNode rootNode){    if(null == rootNode){        return null;    }    BinaryTreeNode leftMirror = getMirrorBinaryTree(rootNode.getLeftChild());    BinaryTreeNode rightMirror = getMirrorBinaryTree(rootNode.getRightChild());    rootNode.setLeftChild(rightMirror);    rootNode.setRightChild(leftMirror);    return rootNode;}</code></pre><h3 id="11-求二叉树中两个节点的最低公共祖先节点"><a href="#11-求二叉树中两个节点的最低公共祖先节点" class="headerlink" title="11. 求二叉树中两个节点的最低公共祖先节点"></a>11. 求二叉树中两个节点的最低公共祖先节点</h3><p><strong>分析：</strong> </p><p>当节点带有parent指针时，可以方便的从给定节点遍历到根节点，经过的路径其实一条链表。因此，求最低公共祖先，就是求两链表的第一个交点。</p><p>当节点没有父指针时，使用递归解法：</p><p>（1）如果两个节点分别在根节点的左子树和右子树，则返回根节点</p><p>（2）如果两个节点都在左子树，则递归处理左子树；如果两个节点都在右子树，则递归处理右子树</p><p><strong>代码如下：</strong> </p><pre><code>/** * Given a binary tree and 2 node, get their lowest common node. * @param rootNode The root node of the binary tree * @return The mirror tree */public BinaryTreeNode getLowestCommonNodeOfTwoNode(BinaryTreeNode rootNode, BinaryTreeNode node1, BinaryTreeNode node2){    if(null == rootNode || null == node1 || null == node2){        return null;    }    if(findNodeInTheTree(rootNode.getLeftChild(),node1)){        //If node1 and node2 are found separately in left and right tree,then rootNode is the lowest common node.        if(findNodeInTheTree(rootNode.getRightChild(),node2)){            return rootNode;        }else{            return getLowestCommonNodeOfTwoNode(rootNode.getLeftChild(),node1,node2);        }    }else{        if(findNodeInTheTree(rootNode.getLeftChild(),node2)){            return rootNode;        }else{            return getLowestCommonNodeOfTwoNode(rootNode.getRightChild(),node1,node2);        }    }}/** * Check if the node is in the tree * @param rootNode The root node of the tree * @param node The node * @return If the tree has this node */private boolean findNodeInTheTree(BinaryTreeNode rootNode, BinaryTreeNode node){    if(null == rootNode){        return false;    }    if(rootNode.equals(node)){        return true;    }    boolean findInLeft = findNodeInTheTree(rootNode.getLeftChild(),node);    boolean findInRight = findNodeInTheTree(rootNode.getRightChild(),node);    return findInLeft||findInRight;}</code></pre><h3 id="12-求二叉树中节点的最大距离"><a href="#12-求二叉树中节点的最大距离" class="headerlink" title="12. 求二叉树中节点的最大距离"></a>12. 求二叉树中节点的最大距离</h3><p><strong>分析：</strong> </p><p>递归解法：</p><p>（1）如果二叉树为空，返回0，同时记录左子树和右子树的深度，都为0</p><p>（2）如果二叉树不为空，最大距离要么是左子树中的最大距离，要么是右子树中的最大距离，要么是左子树节点中到根节点的最大距离+右子树节点中到根节点的最大距离，同时记录左子树和右子树节点中到根节点的最大距离。</p><p><strong>代码如下：</strong> </p><pre><code>/** * Get the biggest distance between nodes of binary tree * @param rootNode The root node of the binary tree * @return The distance */private int getBiggestDistanceBetweenNodeOfBinaryTree(BinaryTreeNode rootNode){    if(null == rootNode){        return 0;    }    int disLeft = getBiggestDistanceBetweenNodeOfBinaryTree(rootNode.getLeftChild());    int disRight = getBiggestDistanceBetweenNodeOfBinaryTree(rootNode.getRightChild());    int maxLeft = 0, maxRight = 0;    if(null != rootNode.getLeftChild()){        maxLeft = this.getDepthOfBinaryTree(rootNode.getLeftChild())+1;    }    if(null != rootNode.getRightChild()){        maxRight = this.getDepthOfBinaryTree(rootNode.getRightChild())+1;    }    return Math.max(Math.max(disLeft,disRight),maxLeft+maxRight);}</code></pre><h3 id="13-由前序遍历序列和中序遍历序列重建二叉树"><a href="#13-由前序遍历序列和中序遍历序列重建二叉树" class="headerlink" title="13. 由前序遍历序列和中序遍历序列重建二叉树"></a>13. 由前序遍历序列和中序遍历序列重建二叉树</h3><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p><p><strong>分析：</strong> </p><p>在二叉树的前序遍历序列中，第一个数字总是树的根结点的值。但在中序遍历序列中，根结点的值在序列的中间，左子树的结点的值位于根结点的值的左边，而右子树的结点的值位于根结点的值的右边。因此我们需要扫描中序遍历序列，才能找到根结点的值。</p><p>　　前序遍历序列的第一个数字1就是根结点的值。扫描中序遍历序列，就能确定根结点的值的位置。根据中序遍历特点，在根结点的值1前面的3个数字都是左子树结点的值，位于1后面的数字都是右子树结点的值。</p><p>　　在二叉树的前序遍历和中序遍历的序列中确定根结点的值、左子树结点的值和右子树结点的值的步骤如下图所示：</p><img src="/zh-Hans/2017/10/02/二叉树相关算法/rebuildBinaryTree.jpg" alt="Rebuild Binary Tree" title="Rebuild Binary Tree"><p>　　分别找到了左、右子树的前序遍历序列和中序遍历序列，我们就可以用同样的方法分别去构建左右子树。换句话说，这是一个递归的过程。　　<br>　　<br><strong>思路总结:</strong></p><p>先根据前序遍历序列的第一个数字创建根结点，接下来在中序遍历序列中找到根结点的位置，这样就能确定左、右子树结点的数量。在前序遍历和中序遍历的序列中划分了左、右子树结点的值之后，就可以递归地去分别构建它的左右子树。<br>　　<br><strong>代码如下：</strong> </p><pre><code>/** * Rebuild the binary tree based on the pre-order and middle-order output of the tree. * @param preOrderArr The pre-order array output * @param midOrderArr The middle-order array output * @return The head node of the binary tree */public BinaryTreeNode rebuildBinaryTree(int[] preOrderArr, int[] midOrderArr){    if (preOrderArr == null || midOrderArr == null || preOrderArr.length != midOrderArr.length || preOrderArr.length &lt; 1 || midOrderArr.length &lt; 1) {        return null;    }    return rebuildBinaryTree(preOrderArr, 0, preOrderArr.length - 1, midOrderArr, 0, midOrderArr.length -1);}/** * Recursively build the tree * @param preOrderArr The pre order array * @param preStart The start index of pre order array * @param preEnd The end index of the pre order array * @param midOrderArr The middle order array * @param midStart The start index of middle order array * @param midEnd The end index of middle order array * @return The root node of the sub tree after building. */public BinaryTreeNode rebuildBinaryTree(int[] preOrderArr, int preStart, int preEnd, int[] midOrderArr, int midStart, int midEnd){    if (preStart &gt; preEnd) {        return null;    }    // Get current root node    int rootValue = preOrderArr[preStart];    //Get the index of current root node in the midOrderArray    int indexInMid = midStart;    while (indexInMid &lt;= midEnd &amp;&amp; midOrderArr[indexInMid] != rootValue) {        indexInMid++;    }    // Create the current root node    BinaryTreeNode rootNode = new BinaryTreeNode(rootValue);    // Rebuild the left sub tree    BinaryTreeNode leftChild = rebuildBinaryTree(preOrderArr, preStart + 1,            preStart + indexInMid - midStart,            midOrderArr, midStart, indexInMid - 1);    //Rebuild the right sub tree    BinaryTreeNode rightChild = rebuildBinaryTree(preOrderArr, preStart + indexInMid - midStart + 1,            preEnd, midOrderArr, indexInMid + 1, midEnd);    rootNode.setLeftChild(leftChild);    rootNode.setRightChild(rightChild);    return rootNode;}</code></pre><h3 id="14-判断二叉树是不是完全二叉树"><a href="#14-判断二叉树是不是完全二叉树" class="headerlink" title="14. 判断二叉树是不是完全二叉树"></a>14. 判断二叉树是不是完全二叉树</h3><p><strong>完全二叉树(Complete Binary Tree)</strong></p><p>若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。</p><p><strong>分析：</strong> </p><p>按层次（从上到下，从左到右）遍历二叉树，当遇到一个节点的左子树为空时，则该节点右子树必须为空，且后面遍历的节点左<br>右子树都必须为空，否则不是完全二叉树。</p><p><strong>代码如下：</strong> </p><pre><code>/** * Given a binary tree, check if it&apos;s complete binary tree. * @param rootNode The root node of the tree * @return The flag of if it is complete binary tree */public boolean checkIfCompleteBinaryTree(BinaryTreeNode rootNode){    if(null == rootNode){        return false;    }    Queue&lt;BinaryTreeNode&gt; nodes = new LinkedList&lt;&gt;();    nodes.offer(rootNode);    boolean startHavingEmptyChild = false;    while(!nodes.isEmpty()){        BinaryTreeNode curNode = nodes.poll();        System.out.println(&quot;Pop Node:&quot;+curNode.getValue());        //If already there&apos;s node which has empty child, then this is not complete tree.        if(startHavingEmptyChild                &amp;&amp; (null == curNode.getLeftChild() || null == curNode.getRightChild())){            return false;        }        if(null != curNode.getLeftChild() &amp;&amp; null != curNode.getRightChild()){            nodes.offer(curNode.getLeftChild());            nodes.offer(curNode.getRightChild());        }else if(null != curNode.getLeftChild() &amp;&amp; null == curNode.getRightChild()){            startHavingEmptyChild = true;            nodes.offer(curNode.getLeftChild());        }else if(null == curNode.getLeftChild() &amp;&amp; null != curNode.getRightChild()){            return false;        }else{            startHavingEmptyChild = true;        }    }    return true;}</code></pre><h2 id="四-代码"><a href="#四-代码" class="headerlink" title="四. 代码"></a>四. 代码</h2><p>本文中所有代码，可访问Github获取：<a href="https://github.com/sealyu/algorithm/tree/master/AlgorithmTests/src/main/java/com/haiboyu/algorithm/binarytree" target="_blank" rel="external">BinaryTreeAlgorithms.java</a></p><h2 id="五-参考文献"><a href="#五-参考文献" class="headerlink" title="五. 参考文献"></a>五. 参考文献</h2><ol><li><a href="http://www.jianshu.com/p/f5baf7f27a7e" target="_blank" rel="external">各种排序算法总结</a></li><li><a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91" target="_blank" rel="external">二叉树</a></li><li><a href="http://blog.csdn.net/walkinginthewind/article/details/7518888" target="_blank" rel="external">轻松搞定面试中的二叉树题目</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-简介&quot;&gt;&lt;a href=&quot;#一-简介&quot; class=&quot;headerlink&quot; title=&quot;一. 简介&quot;&gt;&lt;/a&gt;一. 简介&lt;/h2&gt;&lt;p&gt;根据维基百科的定义：在计算机科学中，二叉树（英语：Binary tree）是每个节点最多只有两个分支(不存在分支度大于2
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://haiboyu.me/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://haiboyu.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>链表相关算法</title>
    <link href="http://haiboyu.me/zh-Hans/2017/10/02/%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/"/>
    <id>http://haiboyu.me/zh-Hans/2017/10/02/链表相关算法/</id>
    <published>2017-10-02T19:58:59.000Z</published>
    <updated>2017-10-09T20:45:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h2><p>根据维基百科的定义：链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。<br>使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。</p><h2 id="二-实际应用"><a href="#二-实际应用" class="headerlink" title="二. 实际应用"></a>二. 实际应用</h2><p>根据链表结构插入和删除效率特别高的特点，链表主要用于插入和删除数据比较频繁并要求高效率的场景，比如：</p><ol><li>操作系统的文件系统管理和内存池等。</li><li>内存数据库Redis中就有多个功能（发布与订阅、慢查询、监视器等）用到了无环双向链表。</li><li>版本管理系统Git的很多操作也是基于链表。merge和rebase等操作就是直接将链表指针移动到对应的branch所对应的node。</li><li>还有一些场景中，如果对使用线性表的长度和规模无法预测和控制时，会改为使用链表，比如通讯录等。</li></ol><h2 id="三-常见算法"><a href="#三-常见算法" class="headerlink" title="三. 常见算法"></a>三. 常见算法</h2><p>本文中所有的单向链表和双向链表的结构定义如下：</p><pre><code>//单向链表    public class Node {    private int value;    private Node next;...}//双向链表public class DoublyNode {    private int value;    private DoublyNode previous;    private DoublyNode next;    ...}</code></pre><h3 id="1-在O-1-时间删除链表节点"><a href="#1-在O-1-时间删除链表节点" class="headerlink" title="1. 在O(1)时间删除链表节点"></a>1. 在O(1)时间删除链表节点</h3><p><strong>题目描述：</strong> 给定链表的头指针和一个节点指针，在O(1)时间删除该节点。</p><p><strong>分析：</strong> 本题主要思想是用下一个节点数据覆盖要删除的节点，然后删除下一个节点。如果待删除节点是尾节点时，直接删除该节点即可, 但是需要注意的是，这种情况下时间复杂度是O(N)而不是O(1)。</p><p><strong>代码如下：</strong> </p><pre><code>/** * Given a linked list, delete the node in O(1) time complexity. * @param headNodeBeforeDeletingNode The source head node of the linked list * @param nodeToBeDeleted The node need to be deleted. * @return The head node of the linked list after deleting the node. */public Node deleteNodeInO1TimeComplexity(Node headNodeBeforeDeletingNode, Node nodeToBeDeleted) {    if(null == headNodeBeforeDeletingNode || null == nodeToBeDeleted){        System.out.println(&quot;The source linked list or the node to be deleted is null, will do nothing!&quot;);        return headNodeBeforeDeletingNode;    }    if(null == nodeToBeDeleted.getNext()){        //Note: Here if the node need to be removed is the last node of the list, we will        //not be able to delete it in O(1) time complexity, it&apos;s gonna to be O(N).        Node tempNode = headNodeBeforeDeletingNode;        while(tempNode.getNext() != null){            if(tempNode.getNext().equals(nodeToBeDeleted)){                tempNode.setNext(null);                return headNodeBeforeDeletingNode;            }            tempNode = tempNode.getNext();        }    }else{        Node nextNode = nodeToBeDeleted.getNext();        nodeToBeDeleted.setValue(nextNode.getValue());        nodeToBeDeleted.setNext(nextNode.getNext());    }    return headNodeBeforeDeletingNode;}</code></pre><h3 id="2-单链表的转置-transpose"><a href="#2-单链表的转置-transpose" class="headerlink" title="2. 单链表的转置(transpose)"></a>2. 单链表的转置(transpose)</h3><p><strong>题目描述：</strong> 输入一个单向链表，输出逆序反转后的链表</p><p><strong>分析：</strong> 用两个辅助指针 pre、next 在链表上循环一遍即可</p><p><strong>代码如下：</strong> </p><pre><code>/** * Transpose the linked list to a reverse order. * @param headNodeOfSourceList The head node of the source linked list * @return The head node of the transposed linked list. */public Node transposeLinkedList(Node headNodeOfSourceList){    if(null == headNodeOfSourceList || headNodeOfSourceList.getNext() == null){        System.out.println(&quot;The source linked list is null or only has 1 element, will do nothing!&quot;);        return headNodeOfSourceList;    }    Node pre = null;    Node next = null;    Node cur = headNodeOfSourceList;    while(cur != null){        next = cur.getNext();        cur.setNext(pre);        pre = cur;        cur = next;    }    return pre;}</code></pre><h3 id="3-求链表倒数第k个节点"><a href="#3-求链表倒数第k个节点" class="headerlink" title="3. 求链表倒数第k个节点"></a>3. 求链表倒数第k个节点</h3><p><strong>题目描述：</strong> 输入一个单向链表，输出该链表中倒数第k个节点，链表的倒数第0个节点为链表的尾指针。</p><p><strong>分析：</strong> 设置两个指针 p1、p2，首先 p1 和 p2 都指向 head，然后 p2 向前走 k 步，这样 p1 和 p2 之间就间隔 k 个节点，最后 p1 和 p2 同时向前移动，直至 p2 走到链表末尾。</p><p><strong>代码如下：</strong> </p><pre><code>/** * Given a linked list and a int k(between 1 and length of list), get the last K node. * @param headNodeOfSourceList * @param k The int k(between 1 and length of list) * @return The last k node */public Node getLastKNodeOfTheLinkedList(Node headNodeOfSourceList, int k){    Node position1 = headNodeOfSourceList;    Node position2 = headNodeOfSourceList;    int j = k;    //First, move position2 to the k-th element of the list.    while(j &gt; 1){        position2 = position2.getNext();        j--;    }    //Then move both position1 and position2 forward, when position2 reach end,    // position1 is the last k-th element.    while(position2.getNext() != null){        position1 = position1.getNext();        position2 = position2.getNext();    }    return position1;}</code></pre><h3 id="4-求链表的中间节点"><a href="#4-求链表的中间节点" class="headerlink" title="4. 求链表的中间节点"></a>4. 求链表的中间节点</h3><p><strong>题目描述：</strong> 求链表的中间节点，如果链表的长度为偶数，返回中间两个节点的任意一个，若为奇数，则返回中间节点。</p><p><strong>分析：</strong> 此题的解决思路和第3题「求链表的倒数第 k 个节点」很相似。可以先求链表的长度，然后计算出中间节点所在链表顺序的位置。但是如果要求只能扫描一遍链表，如何解决呢？最高效的解法和第3题一样，通过两个指针来完成。用两个指针从链表头节点开始，一个指针每次向后移动两步，一个每次移动一步，直到快指针移到到尾节点，那么慢指针即是所求。</p><p><strong>代码如下：</strong> </p><pre><code>/** * Given a linked list, get the middle node of the list: * If the length is odd, return the middle; else return any of the middle 2 node. * @param headNodeOfSourceList * @return The middle node */public Node getMiddleNodeOfTheLinkedList(Node headNodeOfSourceList){    Node position1 = headNodeOfSourceList;    Node position2 = headNodeOfSourceList;    //Then move both position1 and position2 forward, when position2 reach end,    // position1 is the last k-th element.    while(position2 != null &amp;&amp; position2.getNext() != null){        position1 = position1.getNext();        position2 = position2.getNext().getNext();    }    return position1;}</code></pre><h3 id="5-判断单链表是否存在环"><a href="#5-判断单链表是否存在环" class="headerlink" title="5. 判断单链表是否存在环"></a>5. 判断单链表是否存在环</h3><p><strong>题目描述：</strong> 输入一个单向链表，判断链表是否有环。</p><p><strong>分析：</strong> </p><ol><li>通过两个指针，分别从链表的头节点出发，一个每次向后移动一步，另一个移动两步，两个指针移动速度不一样，如果存在环，那么两个指针一定会在环里相遇。</li><li>p作为指针从表头结点开始以1为步长遍历，边遍历边将表反向，如果p遇到NULL，则说明表没有环；如果p最后等于head，则说明表有环。</li><li>利用一个List和一个指针p，从头结点出发，依次判断每个节点的指针是否存在于List中，如果存在则表示有环，且p就是环的入口点，否则循环结束后p==null，没有环；</li></ol><p><strong>代码如下：</strong> </p><p>以下为使用方法1的代码：</p><pre><code>/** * Given a linked list, check if it has circle: * @param headNodeOfSourceList * @return The flag of if it has circle */public boolean checkIfLinkedListHasCircle(Node headNodeOfSourceList){    Node position1 = headNodeOfSourceList;    Node position2 = headNodeOfSourceList;    //Then move both position1 and position2 forward, if position2 reach null means no circle,    // else position2 will catch up with position1 when there is circle.    while(position2 != null &amp;&amp; position2.getNext() != null){        position1 = position1.getNext();        position2 = position2.getNext().getNext();        if(position1.equals(position2)){            return true;        }    }    return false;}</code></pre><h3 id="6-找到环的入口点"><a href="#6-找到环的入口点" class="headerlink" title="6. 找到环的入口点"></a>6. 找到环的入口点</h3><p><strong>题目描述：</strong> 输入一个单向链表，判断链表是否有环。如果链表存在环，如何找到环的入口点。</p><p><strong>分析：</strong> </p><ol><li><p><strong><em>简单的方法</em></strong>:  类似于判断是否单链表中存在环，使用其中的方法3，利用一个List和一个指针p，从头结点出发，依次判断每个节点的指针是否存在于List中，如果存在则表示有环，且p就是环的入口点</p></li><li><p><strong><em>双指针的方法</em></strong></p></li></ol><img src="/zh-Hans/2017/10/02/链表相关算法/linkedlist-circle.jpg" alt="找到单链表环入口" title="找到单链表环入口"><p>h是链表起始点，s是环入口，p是两个指针碰撞点。r表示环的长度，r = x+y.<br>可以证明， a = y + mr （头指针 到 环入口的距离 = 碰撞点p 到 环入口的距离 + 循环多次环 ）。证明如下：<br>当fast若与slow相遇时，slow肯定没有走遍历完链表，而fast已经在环内循环了n圈(1&lt;=n)。假设slow走了s步，则fast走了2s步（fast步数还等于s 加上在环上多转的n圈），设环长为r，则： 2s = s + nr s= nr 设整个链表长L，入口环与相遇点距离为x，起点到环入口点的距离为a。</p><pre><code>s = nra + x = nra + x = (n – 1)r +r = (n-1)r + r a = (n-1)r + r - xa = (n-1)r + y</code></pre><p>由此可知，从链表头到环入口点等于(n-1)循环内环+ 相遇点到环入口点，于是我们从链表头、与相遇点分别设一个指针，每次各走一步，两个指针必定相遇，且相遇第一点为环入口点。</p><p><strong>代码如下：</strong> </p><p>以下为使用方法1的代码：</p><pre><code>/** * Given a linked list, get the entry node of the circle if the linked list has circle. * Using 2 pointers * @param headNodeOfSourceList * @return The middle node */public Node getCircleEntryNodeOfTheLinkedListWithCircle2(Node headNodeOfSourceList){    Node position1 = headNodeOfSourceList;    Node position2 = headNodeOfSourceList;    //Then move both position1 and position2 forward, when position2 reach end,    // position1 is the last k-th element.    while(position2 != null &amp;&amp; position2.getNext() != null){        position1 = position1.getNext();        position2 = position2.getNext().getNext();    }    return position1;}</code></pre><p>以下为使用方法2的代码：</p><pre><code>/** * Given a linked list, get the entry node of the circle if the linked list has circle. * Using 2 pointers * @param headNodeOfSourceList * @return The middle node */public Node getCircleEntryNodeOfTheLinkedListWithCircle2(Node headNodeOfSourceList){    Node position1 = headNodeOfSourceList;    Node position2 = headNodeOfSourceList;    //Then move both position1 and position2 forward, when position2 reach end,    // position1 is the last k-th element.    while(position2 != null &amp;&amp; position2.getNext() != null){        position1 = position1.getNext();        position2 = position2.getNext().getNext();        if(position1.equals(position2)){            //先判断是否有环            break;        }    }    //不存在环返回null    if(!position1.equals(position2)){        return null;    }    //快指针重新从表头开始按照步长1走，与慢指针相遇的点就是环入口。    position2 = headNodeOfSourceList;    while(!position1.equals(position2)){        position1 = position1.getNext();        position2 = position2.getNext();    }    return position1;}</code></pre><h3 id="7-编程判断两个链表是否相交"><a href="#7-编程判断两个链表是否相交" class="headerlink" title="7. 编程判断两个链表是否相交"></a>7. 编程判断两个链表是否相交</h3><p><strong>题目描述：</strong> 给出两个单向链表的头指针（如下图所示），<br><img src="/zh-Hans/2017/10/02/链表相关算法/2LinkedList.jpg" alt="2 linked list" title="2 linked list"><br>比如h1、h2，判断这两个链表是否相交。这里为了简化问题，我们假设两个链表均不带环。</p><p><strong>分析：</strong> </p><p>解题思路：</p><p>“如果两个没有环的链表相交于某一节点，那么在这个节点之后的所有节点都是两个链表共有的”这个特点，我们可以知道，如果它们相交，则最后一个节点一定是共有的。而我们很容易能得到链表的最后一个节点，所以这成了我们简化解法的一个主要突破口。那么，我们只要判断两个链表的尾指针是否相等。相等，则链表相交；否则，链表不相交。<br>所以，先遍历第一个链表，记住最后一个节点。然后遍历第二个链表，到最后一个节点时和第一个链表的最后一个节点做比较，如果相同，则相交，否则，不相交。这样我们就得到了一个时间复杂度，它为O((Length(h1) + Length(h2))，而且只用了一个额外的指针来存储最后一个节点。这个方法时间复杂度为线性O(N)，空间复杂度为O(1)</p><p><strong>代码如下：</strong> </p><pre><code>/**     * Given 2 linked list, check if they intersect:     * @param headNodeOfSourceList1 The head node of list 1     * @param headNodeOfSourceList2 The head node of list 2     * @return The flag of if the two linked list intersect     */    public boolean checkIfLinkedListHasCircle(Node headNodeOfSourceList1, Node headNodeOfSourceList2){        if(headNodeOfSourceList1 == null || headNodeOfSourceList2 == null){            return false;        }        while(headNodeOfSourceList1.getNext() != null){            headNodeOfSourceList1 = headNodeOfSourceList1.getNext();        }        while(headNodeOfSourceList2.getNext() != null){            headNodeOfSourceList2 = headNodeOfSourceList2.getNext();        }        return headNodeOfSourceList1.equals(headNodeOfSourceList2);    }</code></pre><h3 id="8-两链表相交的第一个公共节点"><a href="#8-两链表相交的第一个公共节点" class="headerlink" title="8. 两链表相交的第一个公共节点"></a>8. 两链表相交的第一个公共节点</h3><p><strong>题目描述：</strong> 如果两个无环单链表相交，怎么求出他们相交的第一个节点呢？</p><p><strong>分析：</strong> 采用对齐的思想。计算两个链表的长度 L1 , L2，分别用两个指针 p1 , p2 指向两个链表的头，然后将较长链表的 p1（假设为 p1）向后移动L2 - L1个节点，然后再同时向后移动p1 , p2，直到 p1 = p2。相遇的点就是相交的第一个节点。</p><p><strong>代码如下：</strong> </p><pre><code>/** * Get the lengh of the linked list * @param headNodeOfSourceList The head node of the linked list * @return The length of the linked list */private int getLengthOfLinkedList(Node headNodeOfSourceList){    if(null == headNodeOfSourceList){        return 0;    }    int length = 0;    while(headNodeOfSourceList != null){        headNodeOfSourceList = headNodeOfSourceList.getNext();        length++;    }    return  length;}/** * Given 2 linked list, get the first common node of the 2 intersected linked list. * @param headNodeOfSourceList1 The head node of list 1 * @param headNodeOfSourceList2 The head node of list 2 * @return The intersect node of 2 linked list */public Node getIntersectNodeOfTheTwoIntersectLinkedList(Node headNodeOfSourceList1, Node headNodeOfSourceList2){    int length1 = getLengthOfLinkedList(headNodeOfSourceList1);    int length2 = getLengthOfLinkedList(headNodeOfSourceList2);    //First move the longer linked list to the same size node postion as the other one    if(length1 &lt; length2){        for(int i = 0; i &lt; length2 - length1; i++)        {            headNodeOfSourceList2 = headNodeOfSourceList2.getNext();        }    }else{        for(int i = 0; i &lt; length1 - length2; i++)        {            headNodeOfSourceList1 = headNodeOfSourceList1.getNext();        }    }    //Then move both linked list forward, the first equal node is the intesect node    while(null != headNodeOfSourceList1 &amp;&amp; !headNodeOfSourceList1.equals(headNodeOfSourceList2)){        headNodeOfSourceList1 = headNodeOfSourceList1.getNext();        headNodeOfSourceList2 = headNodeOfSourceList2.getNext();    }    return headNodeOfSourceList1;}</code></pre><h2 id="四-代码"><a href="#四-代码" class="headerlink" title="四. 代码"></a>四. 代码</h2><p>本文中所有代码，可访问Github获取：<a href="https://github.com/sealyu/algorithm/tree/master/AlgorithmTests/src/main/java/com/haiboyu/algorithm/linkedlist" target="_blank" rel="external">LinkedListAlgorithms.java</a></p><h2 id="五-参考文献"><a href="#五-参考文献" class="headerlink" title="五. 参考文献"></a>五. 参考文献</h2><ol><li><a href="http://wuchong.me/blog/2014/03/25/interview-link-questions/" target="_blank" rel="external">Jark’s Blog - 面试精选：链表问题集锦</a></li><li><a href="https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8" target="_blank" rel="external">链表- 维基百科</a></li><li><a href="http://xfhnever.com/2014/11/04/algorithm-linklistcycle/" target="_blank" rel="external">算法（十四）-单链表的环问题</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-简介&quot;&gt;&lt;a href=&quot;#一-简介&quot; class=&quot;headerlink&quot; title=&quot;一. 简介&quot;&gt;&lt;/a&gt;一. 简介&lt;/h2&gt;&lt;p&gt;根据维基百科的定义：链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://haiboyu.me/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://haiboyu.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>中文数字和阿拉伯数字的转换</title>
    <link href="http://haiboyu.me/zh-Hans/2017/09/25/%E4%B8%AD%E6%96%87%E6%95%B0%E5%AD%97%E5%92%8C%E9%98%BF%E6%8B%89%E4%BC%AF%E6%95%B0%E5%AD%97%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>http://haiboyu.me/zh-Hans/2017/09/25/中文数字和阿拉伯数字的转换/</id>
    <published>2017-09-25T22:05:32.000Z</published>
    <updated>2017-10-03T23:08:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>在微软的面试中遇到一个算法问题，要求将类似于”二十五万五百亿三千零八万一千零三十五”的中文数字转换成对应的阿拉伯数字。结果在面试中一味地想着用栈或者其他数据结构去实现，而没有仔细的分析具体问题和算法就开始写代码，导致完成的非常差劲。</p><h2 id="一-中文数字的特点："><a href="#一-中文数字的特点：" class="headerlink" title="一. 中文数字的特点："></a>一. 中文数字的特点：</h2><ol><li>包括零到九的基本数字</li><li>数量级文字：十、百、千、万、亿、兆、京。。。等。十百千不能连续出现，从万开始，数量级前缀其他数量级一起使用</li></ol><h2 id="二-算法设计"><a href="#二-算法设计" class="headerlink" title="二. 算法设计"></a>二. 算法设计</h2><p>1.使用一个Map<string,long>存储所有的数量级文字信息：</string,long></p><pre><code>/** * 数量级map，存储对应的数量级文字和对应的阿拉伯数字量值 * @return The operator map */private static Map&lt;String,Long&gt; getMagnitudeMap(){    Map&lt;String,Long&gt; magnitudeMap = new HashMap();    magnitudeMap.put(&quot;十&quot;, 10l);    magnitudeMap.put(&quot;百&quot;, 100l);    magnitudeMap.put(&quot;千&quot;, 1000l);    magnitudeMap.put(&quot;万&quot;, 10000l);    magnitudeMap.put(&quot;亿&quot;, 100000000l);    magnitudeMap.put(&quot;兆&quot;, 1000000000000l);    magnitudeMap.put(&quot;京&quot;, 10000000000000000l);    return magnitudeMap;}</code></pre><p> 使用另一个Map<string,long>存储所有的基本数字信息：</string,long></p><pre><code>/** * 基本数据map，存储对应的基本数据及对应的阿拉伯数字量值 * @return The magnitude map */private static Map&lt;String,Long&gt; getDataMap(){    Map&lt;String,Long&gt; dataMap = new HashMap&lt;&gt;();    dataMap.put(&quot;一&quot;,1l);    dataMap.put(&quot;二&quot;,2l);    dataMap.put(&quot;三&quot;,3l);    dataMap.put(&quot;四&quot;,4l);    dataMap.put(&quot;五&quot;,5l);    dataMap.put(&quot;六&quot;,6l);    dataMap.put(&quot;七&quot;,7l);    dataMap.put(&quot;八&quot;,8l);    dataMap.put(&quot;九&quot;,9l);    dataMap.put(&quot;零&quot;,0l);    return dataMap;}    </code></pre><p>2.从后往前遍历字符串，遇到数字的时候，如果是零直接跳过，否则将当前数字前一位数量级相乘并累加到sumvalue中。</p><pre><code>/** * 从后往前遍历字符串的方式将中文数字转换为阿拉伯数字 * @param inputStr 源字符串 * @return 转换后的阿拉伯数字 * @throws Exception 如果字符串中有不能识别的（不在dataMap和operatorMap）字符，抛出异常 */public long convertToLongFromEnd(String inputStr) throws Exception{    //存储遇到该数字前的最大一个数量值，这个值是累乘之前所有数量级，    //比如二百万，到二的时候最高数量级就是100*10000    long currentMaxLevel = 1l;    //存储之前一次执行过乘操作的数量级    long previousOpeMagnitude = 1l;    //存储当前字符所对应的数量级    long currentMagnitude = 1l;    //存储当前所有字符仲最大的单个字符的数量级，    long maxMagnitude = 1l;    long sumVal = 0l;    int len = inputStr.length();    //倒序循环整个字符串，从最低位开始计算整个数值    for(int i=len-1;i&gt;=0;i--){        String currentTxt = String.valueOf(inputStr.charAt(i));        //如果当前值是数量级        if(magnitudeMap.containsKey(currentTxt)){            currentMagnitude = magnitudeMap.get(currentTxt);            //如果第一位是一个数量级（比如十二）, 将当前值相加            if(i == 0){                sumVal = sumVal + currentMagnitude;                return  sumVal;            }            //比较当前数量级与当前最大数量值，如果大于当前最大值，将当然最大数量值更新为当前数量级            if(currentMagnitude &gt; currentMaxLevel){                currentMaxLevel = currentMagnitude;            }else{                if(currentMagnitude &lt; maxMagnitude &amp;&amp; currentMagnitude &gt; previousOpeMagnitude){                    //如果当前数量级小于当前最大数量级并且大于之前的数量级,比如二十五万五百亿，抵达&quot;万&quot;的时候因为之前的百                    //已经与亿相乘，所以应该除以之前的百才能得到当前真正的最大数量值                    currentMaxLevel = currentMaxLevel*currentMagnitude/previousOpeMagnitude;                }else{                    currentMaxLevel = currentMaxLevel*currentMagnitude;                }                previousOpeMagnitude = currentMagnitude;            }            //将当前最大单数量级更新为当前数量级            if(currentMagnitude &gt; maxMagnitude){                maxMagnitude = currentMagnitude;            }        }else if(dataMap.containsKey(currentTxt)){            //如果是0~9之间的数字，与前面一位数量级相乘，并累加到当前sumVal            long data = dataMap.get(currentTxt);            if(data == 0){                //跳过0                continue;            }else{                sumVal = sumVal + data*currentMaxLevel;            }        }else{            throw new Exception(&quot;Find illegal character in the input string:&quot;+currentTxt);        }    }    return sumVal;}</code></pre><h2 id="三-代码及测试"><a href="#三-代码及测试" class="headerlink" title="三. 代码及测试"></a>三. 代码及测试</h2><ol><li>相关代码详见：<a href="https://github.com/sealyu/algorithm/blob/master/AlgorithmTests/src/main/java/com/haiboyu/algorithm/other/ChineseNumberConverter.java" target="_blank" rel="external">ChineseNumberConverter.java</a></li><li>单元测试详见：<a href="https://github.com/sealyu/algorithm/blob/master/AlgorithmTests/src/test/java/TestChineseNumberConverter.java" target="_blank" rel="external">TestChineseNumberConverter.java</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在微软的面试中遇到一个算法问题，要求将类似于”二十五万五百亿三千零八万一千零三十五”的中文数字转换成对应的阿拉伯数字。结果在面试中一味地想着用栈或者其他数据结构去实现，而没有仔细的分析具体问题和算法就开始写代码，导致完成的非常差劲。&lt;/p&gt;
&lt;h2 id=&quot;一-中文数字的特
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://haiboyu.me/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://haiboyu.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Design Pattern 笔记 - 代理模式(Proxy Pattern)</title>
    <link href="http://haiboyu.me/zh-Hans/2017/09/22/Design-Pattern-Note-Proxy-Pattern/"/>
    <id>http://haiboyu.me/zh-Hans/2017/09/22/Design-Pattern-Note-Proxy-Pattern/</id>
    <published>2017-09-22T20:11:21.000Z</published>
    <updated>2017-10-03T23:08:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-定义"><a href="#一-定义" class="headerlink" title="一. 定义"></a>一. 定义</h2><p>代理模式(Proxy Pattern) ：给某一个对象提供一个代 理，并由代理对象控制对原对象的引用。代理模式的英 文叫做Proxy或Surrogate，它是一种对象结构型模式。</p><img src="/zh-Hans/2017/09/22/Design-Pattern-Note-Proxy-Pattern/proxypattern.png" alt="Proxy Pattern" title="Proxy Pattern"><h2 id="二-常用场景"><a href="#二-常用场景" class="headerlink" title="二. 常用场景"></a>二. 常用场景</h2><h3 id="1-远程代理"><a href="#1-远程代理" class="headerlink" title="1. 远程代理"></a>1. 远程代理</h3><p>为对象在不同的地址空间提供局部代表，比如远程方法调用（RMI）利用代理模式，使得在其他 JVM 中执行的对象就像本地对象一样；企业 JavaBeans （EJB）利用代理模式添加远程调用、安全性和事务分界；而 JAX-RPC Web 服务则用代理模式让远程服务表现得像本地对象一样。代理可以用来提供远程控制（就像在 RMI、EJB 和 JAX-RPC 中那样），用安全性策略包装对象（EJB）、为昂贵的对象（EJB 实体 Bean）提供惰性装入，或者添加检测工具（例如日志记录）。</p><h3 id="2-图片代理"><a href="#2-图片代理" class="headerlink" title="2. 图片代理"></a>2. 图片代理</h3><p>一些网站或者程序中在显示图片列表时使用缩略图显示，只有在需要放大浏览或者下载时才访问真正的原图。</p><h3 id="3-保护代理"><a href="#3-保护代理" class="headerlink" title="3. 保护代理"></a>3. 保护代理</h3><p>可以控制对一个对象的访问权限，为不同用户提供不同级别的使用权限</p><h3 id="4-虚拟代理"><a href="#4-虚拟代理" class="headerlink" title="4. 虚拟代理"></a>4. 虚拟代理</h3><p>如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建。比较典型的例子就是hibernate的延迟加载，Hibernate结合Javassist或CGLIB动态生成代理对象， 通过代理模式来“推迟”加载关联实体的时间，如果程序并不需要访问关联实体，那程序就不会去抓取关联实体。这样既可以节省系统的内存开销，也可以缩短 Hibernate 加载实体的时间。</p><h3 id="5-动态代理"><a href="#5-动态代理" class="headerlink" title="5. 动态代理"></a>5. 动态代理</h3><p>比较典型的应用场景：</p><ol><li>缓存系统</li><li>spring AOP面向切面编程。</li><li>Spring中的事务管理</li><li>RMI在JDK 5后的版本也是使用动态代理生成stub对象。</li><li>单元测试中也使用动态代理来mock对象。</li></ol><h2 id="三-优缺点"><a href="#三-优缺点" class="headerlink" title="三. 优缺点"></a>三. 优缺点</h2><h3 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h3><ol><li>代理模式可以在一定程度上降低系统的耦合度，</li><li>虚拟代理通过使用一个小对象来代表一个大对象，可以减少系 统资源的消耗，对系统进行优化并提高运行速度。</li><li>保护代理可以控制对真实对象的使用权限。</li><li>通过在代理对象中添加业务逻辑来实现对一些系统统一行为的定制和扩展，从而能够更灵活地处理对原有对象的控制和访问。</li></ol><h3 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h3><ol><li>由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢</li><li>实现代理模式需要额外的工作，有些代理模式的实现 非常复杂</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-定义&quot;&gt;&lt;a href=&quot;#一-定义&quot; class=&quot;headerlink&quot; title=&quot;一. 定义&quot;&gt;&lt;/a&gt;一. 定义&lt;/h2&gt;&lt;p&gt;代理模式(Proxy Pattern) ：给某一个对象提供一个代 理，并由代理对象控制对原对象的引用。代理模式的英 文叫
      
    
    </summary>
    
      <category term="Design Pattern" scheme="http://haiboyu.me/categories/Design-Pattern/"/>
    
    
      <category term="Design Pattern" scheme="http://haiboyu.me/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Red–black BST with no extra memory</title>
    <link href="http://haiboyu.me/en/2017/05/16/red-black-bst-with-no-extra-memory/"/>
    <id>http://haiboyu.me/en/2017/05/16/red-black-bst-with-no-extra-memory/</id>
    <published>2017-05-16T17:54:16.000Z</published>
    <updated>2017-10-01T18:38:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>I am in  a couresa course for algorithm, and in the quiz there’s 1 question:</p><p><span style="color: #ff6600;"><em>Red–black BST with no extra memory. Describe how to save the memory for storing the color information when implementing a red–black BST.</em></span></p><p>I saw some posts which are talking about using pointer(like c or c++ which support pointer) to store the color infomration. But for java, there’s no concept like pointer.</p><p>So 1 solution is to modify the BST tree structure, using the different order to flag the color information:</p><p>Red: Store the color information in the right side node of the red link, as chart below, store the information in node C/J/X.</p><p><a href="http://blog-sealyu.rhcloud.com/wp-content/uploads/2017/05/Screen-Shot-2017-05-16-at-10.34.29-AM.png" target="_blank" rel="external"><img src="http://blog-sealyu.rhcloud.com/wp-content/uploads/2017/05/Screen-Shot-2017-05-16-at-10.34.29-AM.png" alt=""></a></p><p>Using inverse order other than original BST tree, means put it’s larger child to left and smaller child to right for those nodes which store the color information. No matter it has 1 or 2 child, if the color is red, then use the inverse order, and use original order if it’s black. Since the node with red color always has at least 1 left child, then this structure will be able to store the color information without any extra memory cost.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I am in  a couresa course for algorithm, and in the quiz there’s 1 question:&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #ff6600;&quot;&gt;&lt;em&gt;Red–black BST with 
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://haiboyu.me/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://haiboyu.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>L1 Visa renewal or extension?</title>
    <link href="http://haiboyu.me/en/2016/10/11/l1-visa-renewal-or-extension/"/>
    <id>http://haiboyu.me/en/2016/10/11/l1-visa-renewal-or-extension/</id>
    <published>2016-10-11T22:09:24.000Z</published>
    <updated>2017-10-01T18:38:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>For L1 visa, I got it at 2014-11-4 :</p><ul><li>expiration date as 2016-11-6,</li><li>I-129S, expiration date as 2017-11-4</li><li>I-94, expiration date as 2019-11-4</li></ul><p>I need to go back to China at 2016-12-3, and at the time my visa is going to be expired, and then when I come back to US at 2016-12-20, i will not able to entry.</p><p>This problem is driving me crazy these sevral days. And finally I releaize it’s not a big deal. What i need to do is only the L1 VISA renewal.</p><p>Here is what it means:</p><ol><li>Extension is the process of requesting extension of stay as well as work period in US. It is filed by filing I539 ( for extension of stay) and I129 (extension for petition to work). Now generally, all this achieves is the extension of I-94. USCIS would reject the request for extension if applied more than 6 Months before I-94 expiry stating that extension is not required as I am already allowed to stay and work till 2019.  So I don’t need to file an extension now.</li></ol><p>2.As for renewal, it typically means, getting a new visa in my passport. This can happen only outside US. I need to go to the consulate outside US, take interview appointment based on my DS-160, take the I129S, and I797, and supporting documents, and face the Visa Officer and if granted, would get a new L1 stamp in my passport. The advantage of renewal is that I get fresh visa and the freedom to enter US multiple times as long as visa is valid.</p><p>&nbsp;</p><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;For L1 visa, I got it at 2014-11-4 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;expiration date as 2016-11-6,&lt;/li&gt;
&lt;li&gt;I-129S, expiration date as 2017-11-4&lt;/li&gt;
&lt;li&gt;I-
      
    
    </summary>
    
      <category term="Life" scheme="http://haiboyu.me/categories/Life/"/>
    
    
      <category term="Life" scheme="http://haiboyu.me/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>JSF 2 + Richfaces 4 + Seam</title>
    <link href="http://haiboyu.me/en/2016/10/05/jsf-2-richfaces-4-seam/"/>
    <id>http://haiboyu.me/en/2016/10/05/jsf-2-richfaces-4-seam/</id>
    <published>2016-10-05T23:02:23.000Z</published>
    <updated>2017-09-22T20:56:58.000Z</updated>
    
    <content type="html"><![CDATA[<div class="itemizedlist"><br><br>In order to overwrite the default richfaces 4 ecss styles, from the document(<a href="https://docs.jboss.org/richfaces/latest/Developer_Guide/en-US/html_single/#sect-Developer_Guide-RichFaces_overview-Restrictions" target="_blank" rel="external">https://docs.jboss.org/richfaces/latest/Developer_Guide/en-US/html_single/#sect-Developer_Guide-RichFaces_overview-Restrictions</a>). You need to put it to &lt;h:body&gt; section:<br><br>JSF does render resource links (stylesheets, scripts) in order of occurrence, thus if you add <code>&amp;lt;h:outputStylesheet&amp;gt;</code> to the <code>&amp;lt;h:head&amp;gt;</code>section, JSF will render it before the RichFaces resource links (dependencies of RichFaces components). To be able to overwrite RichFaces stylesheets and re-use RichFaces JavaScript implementation, you need to render <code>&amp;lt;h:outputStylesheet&amp;gt;</code> to the <code>&amp;lt;h:body&amp;gt;</code>section (safe solution is to place it on the end of the section; however to keep readability, you can use start of the section).<br><br></div><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;br&gt;&lt;br&gt;In order to overwrite the default richfaces 4 ecss styles, from the document(&lt;a href=&quot;https://docs.jboss.o
      
    
    </summary>
    
      <category term="UI" scheme="http://haiboyu.me/categories/UI/"/>
    
    
      <category term="Java" scheme="http://haiboyu.me/tags/Java/"/>
    
      <category term="UI" scheme="http://haiboyu.me/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>Failed Again on H1B lottery</title>
    <link href="http://haiboyu.me/en/2016/05/04/failed-again-on-h1b-lottery/"/>
    <id>http://haiboyu.me/en/2016/05/04/failed-again-on-h1b-lottery/</id>
    <published>2016-05-04T22:48:31.000Z</published>
    <updated>2017-09-22T20:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>Life is not always good. When god open a window for you, he might close the door!</p><p>My 3rd time for H1B lottery failed again. What the f<em>*</em>!!!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Life is not always good. When god open a window for you, he might close the door!&lt;/p&gt;
&lt;p&gt;My 3rd time for H1B lottery failed again. What t
      
    
    </summary>
    
      <category term="Life" scheme="http://haiboyu.me/categories/Life/"/>
    
    
      <category term="Life" scheme="http://haiboyu.me/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>美国费城买车小记</title>
    <link href="http://haiboyu.me/zh-Hans/2016/04/28/%E7%BE%8E%E5%9B%BD%E8%B4%B9%E5%9F%8E%E4%B9%B0%E8%BD%A6%E5%B0%8F%E8%AE%B0/"/>
    <id>http://haiboyu.me/zh-Hans/2016/04/28/美国费城买车小记/</id>
    <published>2016-04-28T23:25:37.000Z</published>
    <updated>2017-10-01T18:38:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天终于完成了所有买车的流程，拿到Passat的钥匙和title。在美国呆了一年多，因为公司离住的地方很近，即使呆在这个『车轮上的国度』也一直只是靠走路。当然，另一个原因就是费城发达的公共交通。因为儿子即将过来读书，所以不得不买一辆车代步，以方便以后带儿子explore各种好吃好玩的地方。</p><p>整个过程花了大约两周时间，也看过四五辆车子，总体来说还算比较顺利。现在把这个过程记录下来，也算一种不错的经历。</p><p>在美国买车可以通过两种方式，从Dealer或者私人手上买车。从Dealer买车会相对放心一点，但是价格相对也会高很多。所以选择从私人买车。因为正值学生毕业季，身在费城这个很多大学很多华人留学生的城市，可供选择的车还是挺多的。</p><p>整个过程看了5辆车子，2012年的凯美瑞、2010年的Acua、2013年的Nissan Altima、2007年的奥迪A4还有2012年的Passat。寻找这些车子的信息主要是费城和北美这边几个大的华人论坛（北美微论坛、费城华人资讯网、美国同程网）和Craglist，最后发现信息最多的是北美微论坛，车子也是在这里看到车主的广告后联系购买的。</p><p>看了5两车子，前面几辆车子都有或多或少的一些问题。所以最后决定了买Passat。从看车到买车总共花了不到一周时间全部搞定：</p><ol><li>约了原车主看车（原车主是个即将毕业的小伙子，住的很近而且国内的地址也离得很近，还是挺有缘分的）。当天试驾了一下，整体车况很不错，2012年高配的Passat SE，5 cyl，蓝牙、天窗、加热皮座椅等。驾驶感觉也不错。因为原车主由于毕业急着卖出去，所以给的价格也不是很高，基本上当天双方就定下来交易了。</li><li>美国买车前最好必须要做的一件事是查看Carfax和Autocheck报告。这两个报告记录了所有车子的信息，包括里程数，保养记录，是否有事故，之前有几任车主以及是不是之前这个车子被用来出租用。而且这两个公司的信息来源不同，记录的信息有时候也不全面，最好是都看一下。我看Camry的时候就是看到Carfax没有车祸记录而且是clean title所以准备买，结果后来发现Autocheck上记录了车祸记录，这样会影响买车时候的价格。Passat车子的Carfax和Autocheck全部是Clean的，所以很放心的就决定要买了。</li><li>因为手上现金不够，所以根据印度同事的建议，去DCU贷款（<a href="https://www.dcu.org/index.html）。DCU的贷款利率比各大银行利率都会低很多，而且如果Credit" target="_blank" rel="external">https://www.dcu.org/index.html）。DCU的贷款利率比各大银行利率都会低很多，而且如果Credit</a> Score高的话，这个rate会很低。像我拿到的是2.99%的利率，如果是去BOA的话，这个肯定要5%以上。Online提交了我的各种信息，以及和车主签订的sales agreement还有车子title的扫描件，两个工作日之内就办完了贷款，然后使用FedEx的加急服务，贷款完成的第二天晚上就拿到了支票。这个支票是签给seller的，而且必须要seller和buyer两个人同时签名才能入账。</li><li>买车之前最好是去做一个merchanic check，周边很多连锁的店都可以做，比如Firestone。但是因为车主之前是从Dealer那里买的Certified Pre-Own车子，车况也比较好，所以就没有去做。</li><li>在Pennsvalnia，买车前还必须要做的一件事情就是去买Auto insurance。根据同事的推荐，在几个大的保险公司Geico、StateFarm、Progressive都拿了Quote。比较了一下还是Statefarm比较好。所以提供了自己的各种信息，电话里提供了信用卡信息和车子的VIN号码，几分钟就完成了保险的购买。6个月的policy，总共价格不到600刀。Agent立刻寄给我ID Card，以便第二天去办理过户。</li><li><p>和车主第二天去办理过户手续，因为听说人很多所以没有去DMV，就在家附近的Penn DOT授权的Agent那里办理，整个过程用了不到办个小时：</p><ol><li>车主提供了title，registration，并且在title上面签好了自己的名字，报了车子的公里数</li><li>本人提供了有效宾州的驾照，保险的ID card，在title上签名</li><li>本来是想sign as gift，这样可以省掉8%的税。但是因为有贷款，所以就把价格报的和贷款数额一样，这样也省掉了大约500刀购置税。</li><li>除了税，其他的过户手续等大约花了150左右，拿到了新的车牌和registration。</li><li>将车子换好车牌，拿到车钥匙，全部交易完毕。<br>&nbsp;</li></ol></li></ol><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天终于完成了所有买车的流程，拿到Passat的钥匙和title。在美国呆了一年多，因为公司离住的地方很近，即使呆在这个『车轮上的国度』也一直只是靠走路。当然，另一个原因就是费城发达的公共交通。因为儿子即将过来读书，所以不得不买一辆车代步，以方便以后带儿子explore各种
      
    
    </summary>
    
      <category term="Life" scheme="http://haiboyu.me/categories/Life/"/>
    
    
      <category term="Life" scheme="http://haiboyu.me/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Javascript timezone issue with backend server in different zone</title>
    <link href="http://haiboyu.me/en/2015/10/02/javascript-timezone-issue-with-backend-server-in-different-zone/"/>
    <id>http://haiboyu.me/en/2015/10/02/javascript-timezone-issue-with-backend-server-in-different-zone/</id>
    <published>2015-10-02T21:09:27.000Z</published>
    <updated>2017-09-22T20:56:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Today I met an problem when doing the test in the server from different timezone:</p><ol><li>Client select a date(Say 2015-10-1 ) from the form, angular populate the datetime with new Date() from javascript and pass it to server.</li><li>After saving the object and then display it, it’s displayed as ‘2015-9-30 23:00:00’. And every time after doing this, we have 1 hour difference.<br>Then I realize this should be a timezone issue and check the document:</li></ol><p>“When populating the date and no timezone is specified, it default to use the local timezone from the client browser”.</p><p>Since our QA server is from different timezone, we always has the 1 hour difference.</p><p><strong>Solution:</strong></p><p>We could have multiple solutions for this. But our requirement is pretty straightforward, we just want no matter which date the client selected, we have the same value saved to database. So I changed the value that we passed to server to be a string value(like ‘2015/10/1’) and parse the date from server side, instead of using the datatime long value.</p><p>There also some other solution referred:</p><p><a href="http://www.techrepublic.com/article/convert-the-local-time-to-another-time-zone-with-this-javascript/" target="_blank" rel="external">http://www.techrepublic.com/article/convert-the-local-time-to-another-time-zone-with-this-javascript/</a></p><p><a href="http://momentjs.com/timezone/docs/" target="_blank" rel="external">http://momentjs.com/timezone/docs/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today I met an problem when doing the test in the server from different timezone:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client select a date(Say 2015-10-1 ) from 
      
    
    </summary>
    
      <category term="Java" scheme="http://haiboyu.me/categories/Java/"/>
    
    
      <category term="Javascript" scheme="http://haiboyu.me/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>EJB3.0 和 EJB2 的区别</title>
    <link href="http://haiboyu.me/zh-Hans/2014/01/06/EJB3.0%20%E5%92%8C%20EJB2%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://haiboyu.me/zh-Hans/2014/01/06/EJB3.0 和 EJB2 的区别/</id>
    <published>2014-01-06T19:35:23.000Z</published>
    <updated>2017-09-22T20:55:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>1. EJB2.0使用EntityBeans来访问数据库，EJB3.0是使用JPA（Java Persistance API）来访问数据库。</p><p>2. EJB2.0 有部署脚本(Deployment descriptiors),EJB3.0没有。</p><p>3. EJB3.0不需要Home接口，EJB2.0需要。</p><p>4. EJB3.0简化了开发，引入了元数据。</p><p>5. EJB2 限制开发人员无法在 EJB 容器外部测试 EJB 模块 ， EJB3可以更方便的使用JUnit等测试框架</p><p>6.EJB3 可以使用更多元化的SQL查询语言，包括native查询，而EJB2使用的是EJBQL。</p><p>7.EJB3的annotation的使用</p><p>8.EJB2中需要创建多个不必要的组件接口，而且要捕获一些不需要的异常信息，使用不太灵活</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1. EJB2.0使用EntityBeans来访问数据库，EJB3.0是使用JPA（Java Persistance API）来访问数据库。&lt;/p&gt;
&lt;p&gt;2. EJB2.0 有部署脚本(Deployment descriptiors),EJB3.0没有。&lt;/p&gt;
&lt;p&gt;3
      
    
    </summary>
    
      <category term="Java" scheme="http://haiboyu.me/categories/Java/"/>
    
    
      <category term="Java" scheme="http://haiboyu.me/tags/Java/"/>
    
      <category term="EJB" scheme="http://haiboyu.me/tags/EJB/"/>
    
  </entry>
  
  <entry>
    <title>儿子第一次用MSN和我的聊天记录</title>
    <link href="http://haiboyu.me/zh-Hans/2011/08/19/%E5%84%BF%E5%AD%90%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%A8MSN%E5%92%8C%E6%88%91%E7%9A%84%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95/"/>
    <id>http://haiboyu.me/zh-Hans/2011/08/19/儿子第一次用MSN和我的聊天记录/</id>
    <published>2011-08-19T10:43:16.000Z</published>
    <updated>2017-09-22T20:55:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>140101<br>m,,<br>mmmmmmmmmmmm<br>p010看过晕<br>ti\<br>9.5 不会呼唤 9 提议明年，， 男男女女男男女女男男女女男男女女年内能000000000000</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;140101&lt;br&gt;m,,&lt;br&gt;mmmmmmmmmmmm&lt;br&gt;p010看过晕&lt;br&gt;ti\&lt;br&gt;9.5 不会呼唤 9 提议明年，， 男男女女男男女女男男女女男男女女年内能000000000000&lt;/p&gt;

      
    
    </summary>
    
      <category term="Life" scheme="http://haiboyu.me/categories/Life/"/>
    
    
      <category term="Life" scheme="http://haiboyu.me/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>一个句号引发的惨案</title>
    <link href="http://haiboyu.me/zh-Hans/2011/04/01/%E4%B8%80%E4%B8%AA%E5%8F%A5%E5%8F%B7%E5%BC%95%E5%8F%91%E7%9A%84%E6%83%A8%E6%A1%88/"/>
    <id>http://haiboyu.me/zh-Hans/2011/04/01/一个句号引发的惨案/</id>
    <published>2011-04-01T08:40:42.000Z</published>
    <updated>2017-09-22T20:50:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天客户对之前做的东西做了一个修改，要求是：<strong>Please add a period to the end of the message.</strong></p><p>看来看去，没想起来到底要加什么period。加一段日期进去？加什么日期呢？</p><p>问了一下，客户回复：I mean the period（。）</p><p>靠，period原来还有句号的意思，这么多年英语白学了，还以为客户的需求没给明白，汗！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天客户对之前做的东西做了一个修改，要求是：&lt;strong&gt;Please add a period to the end of the message.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看来看去，没想起来到底要加什么period。加一段日期进去？加什么日期呢？&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="Life" scheme="http://haiboyu.me/categories/Life/"/>
    
    
      <category term="Life" scheme="http://haiboyu.me/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>nvarchar与varchar的区别</title>
    <link href="http://haiboyu.me/zh-Hans/2010/11/29/nvarchar%E4%B8%8Evarchar%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://haiboyu.me/zh-Hans/2010/11/29/nvarchar与varchar的区别/</id>
    <published>2010-11-29T15:51:15.000Z</published>
    <updated>2017-09-22T20:55:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>nvarchar与varchar的区别&amp;lt;/p&gt;</p><p>varchar[(n)]<br>长度为   n   个字节的可变长度且非   Unicode   的字符数据。n<br>必须是一个介于   1   和   8,000   之间的数值。存储大小为输入数据的字节的实际长度，而不是   n<br>个字节。所输入的数据字符长度可以为零。varchar   在   SQL-92   中的同义词为   char   varying   或<br>character   varying。</p><p>nvarchar(n)<br>包含   n<br>个字符的可变长度   Unicode   字符数据。n   的值必须介于   1   与   4,000<br>之间。字节的存储大小是所输入字符个数的两倍。所输入的数据字符长度可以为零。nvarchar   在   SQL-92   中的同义词为<br>national   char   varying   和   national   character   varying。&amp;amp;nbsp;</p><p>通俗一點就是varchar適合輸入英文和數字，nvarchar一般用做中文或其它語言的輸入，這樣到別的語系不會出現亂碼:))</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nvarchar与varchar的区别&amp;amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;p&gt;varchar[(n)]&lt;br&gt;长度为   n   个字节的可变长度且非   Unicode   的字符数据。n&lt;br&gt;必须是一个介于   1   和   8,000   之间的数值。存储大小
      
    
    </summary>
    
      <category term="Database" scheme="http://haiboyu.me/categories/Database/"/>
    
    
      <category term="Database" scheme="http://haiboyu.me/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Interceptor 中onFlushDirty()函数执行多次的问题（Hibernate 的一个小Bug）</title>
    <link href="http://haiboyu.me/zh-Hans/2008/05/09/Interceptor%20%E4%B8%ADonFlushDirty()%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E5%A4%9A%E6%AC%A1%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88Hibernate%20%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8FBug%EF%BC%89/"/>
    <id>http://haiboyu.me/zh-Hans/2008/05/09/Interceptor 中onFlushDirty()函数执行多次的问题（Hibernate 的一个小Bug）/</id>
    <published>2008-05-09T11:59:00.000Z</published>
    <updated>2017-09-22T20:55:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在项目中遇到一个奇怪的问题，在使用Hibernate拦截器捕获实体变化并进行处理时，发现其中的onFlushDirty()函数执行了很多次，导致进行处理时产生很多重复数据。具体问题如下：<br>使用一个类继承Hibernate的EmptyInterceptor类来对程序中的实体变化进行拦截，并在其中的onFlushDirty()函数中对捕获的数据进行处理，产生对应的event数据并保存到数据库中。 例如：&lt;br /&gt;<br>public class EventInterceptor extends EmptyInterceptor {<br>public boolean onFlushDirty(<br>Object entity,<br>Serializable id,<br>Object[] currentState,<br>Object[] previousState,<br>String[] propertyNames,<br>Type[] types ) throws CallbackException {</p><p>if(isAuditable(entity)){//如果该实体需要被记录，生成对应的event。&lt;br /&gt;<br>//此处生成对应的event。&lt;br /&gt;<br>}<br>return false;<br>}</p><p>在程序执行后，发现对应一条实体的变化生成了多条重复的event记录，非常不解。&lt;br /&gt;<br>后来google发现，有人也碰到过对应的问题，并在Hibernage论坛中提出过这个问题，鉴定为Hibernate的一个小Bug。&lt;br /&gt;<br>（原文地址：<a href="http://forum.hibernate.org/viewtopic.php?t=940410&amp;highlight=interceptor+onflushdirty）&lt;br" target="_blank" rel="external">http://forum.hibernate.org/viewtopic.php?t=940410&amp;highlight=interceptor+onflushdirty）&lt;br</a> /&gt;<br>解决方法如下：&lt;br /&gt;<br>将FlushMode改为：FlushMode.COMMIT<br>或者也可以提前进行flush()<br>都可以解决这个问题。&lt;br /&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在项目中遇到一个奇怪的问题，在使用Hibernate拦截器捕获实体变化并进行处理时，发现其中的onFlushDirty()函数执行了很多次，导致进行处理时产生很多重复数据。具体问题如下：&lt;br&gt;使用一个类继承Hibernate的EmptyInterceptor类来对程序
      
    
    </summary>
    
      <category term="Java" scheme="http://haiboyu.me/categories/Java/"/>
    
    
      <category term="Java" scheme="http://haiboyu.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>sql server 中删除默认约束的通用sql脚本</title>
    <link href="http://haiboyu.me/zh-Hans/2008/04/17/sql%20server%20%E4%B8%AD%E5%88%A0%E9%99%A4%E9%BB%98%E8%AE%A4%E7%BA%A6%E6%9D%9F%E7%9A%84%E9%80%9A%E7%94%A8sql%E8%84%9A%E6%9C%AC/"/>
    <id>http://haiboyu.me/zh-Hans/2008/04/17/sql server 中删除默认约束的通用sql脚本/</id>
    <published>2008-04-17T10:31:00.000Z</published>
    <updated>2017-10-01T18:38:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者： sealyu 日期：2008-04-17<br>在SQL Server 中，如果给表的一个字段设置了默认值，就会在系统表sysobjects中生成一个默认约束。&lt;br /&gt;<br>如果想删除这个设置了默认值的字段（假设此字段名column1），<br>执行“ALTER TABLE table1 DROP COLUMN column1”时就会报错：<br>The object ‘DF__xxxxxxxxxxx’ is dependent on column ‘column1’.<br>ALTER TABLE DROP COLUMN column1failed because one or more objects access this column.</p><p>所以在删除此字段时需要先将系统表中的对应默认约束删除， 可以使用下面的脚本进行删除：<br>– this script drops the default constraint which is generated by the setting of default value.<br>DECLARE @tablename VARCHAR(100), @columnname VARCHAR(100), @tab VARCHAR(100)<br>SET @tablename=’CountryGroupEmailAndWaitAux’<br>SET @columnname=’actionOfHasNoValidEmail’</p><p>declare @defname varchar(100)<br>declare @cmd varchar(100)</p><p>select @defname = name<br>FROM sysobjects so<br>JOIN sysconstraints sc<br>ON so.id = sc.constid<br>WHERE object_name(so.parent_obj) = @tablename<br>AND so.xtype = ‘D’<br>AND sc.colid =<br>(SELECT colid FROM syscolumns<br>WHERE id = object_id(@tablename) AND<br>name = @columnname)</p><p>select @cmd=’alter table ‘+ @tablename+ ‘ drop constraint ‘+ @defname<br>if @cmd is null print ‘No default constraint to drop’<br>exec (@cmd)</p><p>在删除对应的默认约束后，执行：&lt;br /&gt;<br>ALTER TABLE table1 DROP COLUMN column1<br>即可删除字段。&lt;br /&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者： sealyu 日期：2008-04-17&lt;br&gt;在SQL Server 中，如果给表的一个字段设置了默认值，就会在系统表sysobjects中生成一个默认约束。&amp;lt;br /&amp;gt;&lt;br&gt;如果想删除这个设置了默认值的字段（假设此字段名column1），&lt;br&gt;执
      
    
    </summary>
    
      <category term="Database" scheme="http://haiboyu.me/categories/Database/"/>
    
    
      <category term="Database" scheme="http://haiboyu.me/tags/Database/"/>
    
  </entry>
  
</feed>
